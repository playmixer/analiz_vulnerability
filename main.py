import eel
import xlrd
import json
from datetime import datetime
from docx import Document
from docx.shared import Inches
from matplotlib import pyplot
from io import BytesIO

eel.init('web')

MIN_ROW = 3
DATA = 'data.xlsx'
VULNERABILITY_LEVEL = ['Критический уровень опасности', 'Высокий уровень опасности', 'Средний уровень опасности',
                       'Низкий уровень опасности']


@eel.expose
def print_report(*options):
    program, levels, date_start, date_end = options

    document = Document()
    document.add_heading(f'Анализ уязвимостей ПО {program} по данным банка ФСТЭК', 0)

    full_data = get_full_data(program)
    data_filtered_by_params = get_data(full_data, levels, date_start, date_end)

    for lvl in levels:
        data_filtered_by_level = list(
            filter(lambda x: x['level'].startswith(VULNERABILITY_LEVEL[lvl]), data_filtered_by_params))
        create_table(document, data_filtered_by_level, VULNERABILITY_LEVEL[lvl])

    create_diagram(document, full_data, program)
    document.save('web/analiz.docx')

    return True


def create_table(document, data, title):
    document.add_heading(title, level=1)
    if not len(data):
        document.add_paragraph('Угрозы такого типа не найдены!')
        return

    table = document.add_table(rows=1, cols=4)
    row = table.rows[0].cells
    row[0].width = Inches(0.8)
    row[0].text = 'Класс уязвимости'
    row[1].width = Inches(0.8)
    row[1].text = 'Дата выявления'
    row[2].width = Inches(1)
    row[2].text = 'Уровень опаности'
    row[3].width = Inches(3.2)
    row[3].text = 'Описание уязвимости'
    table.style = 'Table Grid'

    for i in range(len(data)):
        table.add_row()
        row = table.rows[i + 1].cells
        row[0].text = data[i]['type']
        row[1].text = data[i]['date']
        row[2].text = data[i]['level']
        row[3].text = data[i]['description']


def create_diagram(document, data, title):
    res = {2015: 0, 2016: 0, 2017: 0, 2018: 0, 2019: 0, 2020: 0}
    for row in data:
        year = datetime.strptime(row['date'], '%d.%m.%Y').year
        if res.get(year) is None:
            res[year] = 1
        else:
            res[year] += 1
    pyplot.close()
    pyplot.title(f"Уязвимости {title}")
    pyplot.bar(list(res.keys()), list(res.values()), width=0.3, color='blue', label='Кол-во за год')
    img = BytesIO()
    pyplot.savefig(img)

    document.add_picture(img)


@eel.expose
def get_applications():
    applications = set()
    file = DATA
    excel = xlrd.open_workbook(file)
    sheet = excel.sheet_by_index(0)
    for i in range(MIN_ROW, sheet.nrows):
        cell = sheet.cell_value(i, 4)
        applications.add(cell)

    return json.dumps(sorted(list(applications)))


def get_full_data(program):
    excel = xlrd.open_workbook(DATA)
    sheet = excel.sheet_by_index(0)
    res = []
    for i in range(MIN_ROW, sheet.nrows):
        if sheet.cell_value(i, 4) == program:
            cell_date_value = sheet.cell(i, 9).value
            date = datetime(*xlrd.xldate_as_tuple(cell_date_value, excel.datemode))
            res.append({
                'type': sheet.cell_value(i, 8),
                'date': date.strftime('%d.%m.%Y'),
                'level': sheet.cell_value(i, 12).split('\n')[0],
                'description': sheet.cell_value(i, 2)
            })
    return res


def get_data(data, levels, date_start, date_end):
    date_start = datetime.strptime(date_start, '%Y-%m-%d')
    date_end = datetime.strptime(date_end, '%Y-%m-%d')
    res = []
    for row in data:
        date = datetime.strptime(row['date'], '%d.%m.%Y')
        if (date >= date_start) and (date <= date_end):
            for lvl in levels:
                if row['level'].startswith(VULNERABILITY_LEVEL[lvl]):
                    res.append(row)
    return res


if __name__ == '__main__':
    eel.start('main.html', size=(550, 650))
